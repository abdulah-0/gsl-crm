-- Teachers, assignments, attendance, and remarks schema
begin;

-- Teachers table
create table if not exists public.dashboard_teachers (
  id text primary key,
  full_name text not null,
  email text not null unique,
  phone text,
  cnic text,
  status text not null default 'Active', -- Active / Inactive
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Assignments: which services/batches a teacher handles
create table if not exists public.dashboard_teacher_assignments (
  id bigint generated by default as identity primary key,
  teacher_id text not null references public.dashboard_teachers(id) on delete cascade,
  service_id text references public.dashboard_services(id) on delete set null,
  service_name text, -- denormalized name for matching to students.program_title if no service_id linkage
  batch_no text, -- optional
  created_at timestamptz not null default now()
);

-- Attendance records per student per date
create table if not exists public.dashboard_attendance (
  id bigint generated by default as identity primary key,
  teacher_id text not null references public.dashboard_teachers(id) on delete cascade,
  student_id text not null references public.dashboard_students(id) on delete cascade,
  attendance_date date not null,
  status text not null check (status in ('Present','Absent','Late')),
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique(teacher_id, student_id, attendance_date)
);

-- Student remarks by teacher
create table if not exists public.dashboard_student_remarks (
  id bigint generated by default as identity primary key,
  teacher_id text not null references public.dashboard_teachers(id) on delete cascade,
  student_id text not null references public.dashboard_students(id) on delete cascade,
  note text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- updated_at triggers
create or replace function public.set_updated_at()
returns trigger language plpgsql as $$
begin new.updated_at = now(); return new; end; $$;

drop trigger if exists set_updated_at_dashboard_teachers on public.dashboard_teachers;
create trigger set_updated_at_dashboard_teachers before update on public.dashboard_teachers for each row execute function public.set_updated_at();

drop trigger if exists set_updated_at_dashboard_attendance on public.dashboard_attendance;
create trigger set_updated_at_dashboard_attendance before update on public.dashboard_attendance for each row execute function public.set_updated_at();

drop trigger if exists set_updated_at_dashboard_student_remarks on public.dashboard_student_remarks;
create trigger set_updated_at_dashboard_student_remarks before update on public.dashboard_student_remarks for each row execute function public.set_updated_at();

-- Indexes
create index if not exists idx_teacher_assignments_teacher on public.dashboard_teacher_assignments(teacher_id);
create index if not exists idx_teacher_assignments_service on public.dashboard_teacher_assignments(service_id);
create index if not exists idx_attendance_teacher_date on public.dashboard_attendance(teacher_id, attendance_date);
create index if not exists idx_attendance_student_date on public.dashboard_attendance(student_id, attendance_date);

-- RLS
alter table public.dashboard_teachers enable row level security;
alter table public.dashboard_teacher_assignments enable row level security;
alter table public.dashboard_attendance enable row level security;
alter table public.dashboard_student_remarks enable row level security;

-- Policies: allow authenticated read; writes open to authenticated (tighten later for admin/teacher as needed)
-- dashboard_teachers
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teachers' and policyname='teachers_select_auth') then
    create policy teachers_select_auth on public.dashboard_teachers for select to authenticated using (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teachers' and policyname='teachers_insert_auth') then
    create policy teachers_insert_auth on public.dashboard_teachers for insert to authenticated with check (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teachers' and policyname='teachers_update_auth') then
    create policy teachers_update_auth on public.dashboard_teachers for update to authenticated using (true) with check (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teachers' and policyname='teachers_delete_auth') then
    create policy teachers_delete_auth on public.dashboard_teachers for delete to authenticated using (true);
  end if;
end $$;

-- dashboard_teacher_assignments
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teacher_assignments' and policyname='teacher_assign_select_auth') then
    create policy teacher_assign_select_auth on public.dashboard_teacher_assignments for select to authenticated using (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_teacher_assignments' and policyname='teacher_assign_write_auth') then
    create policy teacher_assign_write_auth on public.dashboard_teacher_assignments for all to authenticated using (true) with check (true);
  end if;
end $$;

-- dashboard_attendance
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_attendance' and policyname='attendance_select_auth') then
    create policy attendance_select_auth on public.dashboard_attendance for select to authenticated using (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_attendance' and policyname='attendance_write_auth') then
    create policy attendance_write_auth on public.dashboard_attendance for all to authenticated using (true) with check (true);
  end if;
end $$;

-- dashboard_student_remarks
do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_student_remarks' and policyname='remarks_select_auth') then
    create policy remarks_select_auth on public.dashboard_student_remarks for select to authenticated using (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_student_remarks' and policyname='remarks_write_auth') then
    create policy remarks_write_auth on public.dashboard_student_remarks for all to authenticated using (true) with check (true);
  end if;
end $$;

commit;

