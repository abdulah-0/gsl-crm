-- Study materials uploaded by teachers per course/batch
begin;

create table if not exists public.dashboard_study_materials (
  id bigint generated by default as identity primary key,
  teacher_id text not null references public.dashboard_teachers(id) on delete cascade,
  service_id text references public.dashboard_services(id) on delete set null,
  batch_no text,
  title text not null,
  description text,
  file_url text, -- Supabase Storage URL
  link_url text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create or replace function public.set_updated_at()
returns trigger language plpgsql as $$ begin new.updated_at = now(); return new; end; $$;

drop trigger if exists set_updated_at_dashboard_study_materials on public.dashboard_study_materials;
create trigger set_updated_at_dashboard_study_materials before update on public.dashboard_study_materials
for each row execute function public.set_updated_at();

create index if not exists idx_materials_teacher on public.dashboard_study_materials(teacher_id);
create index if not exists idx_materials_service on public.dashboard_study_materials(service_id);

alter table public.dashboard_study_materials enable row level security;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_study_materials' and policyname='materials_select_auth') then
    create policy materials_select_auth on public.dashboard_study_materials for select to authenticated using (true);
  end if;
end $$;

do $$ begin
  if not exists (select 1 from pg_policies where schemaname='public' and tablename='dashboard_study_materials' and policyname='materials_write_auth') then
    create policy materials_write_auth on public.dashboard_study_materials for all to authenticated using (true) with check (true);
  end if;
end $$;

commit;

